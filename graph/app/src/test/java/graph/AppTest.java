/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package graph;

import org.junit.jupiter.api.Test;
import roman_number_Transfare.RomanNumeral;

import static org.junit.jupiter.api.Assertions.*;

class AppTest {
    // Node can be successfully added to the graph
    @Test void test_add_node() {

        Graph graph=new Graph();

        graph.addVertex("A");
        graph.addVertex("B");
        graph.addVertex("C");


        System.out.println(graph.printGraph());

        String result="Vertex{data='A'}[]Vertex{data='B'}[]Vertex{data='C'}[]";
        assertEquals(graph.printGraph(),result);


    }
    //An edge can be successfully added to the graph
    @Test void Test_add_edge() {

        Graph graph=new Graph();

        graph.addVertex("A");
        graph.addVertex("B");
        graph.addVertex("C");


        //add edge for graph
        graph.addEdges("A","B");

        System.out.println(graph.printGraph());
       String result="Vertex{data='A'}[Vertex{data='B'}]Vertex{data='B'}[Vertex{data='A'}]Vertex{data='C'}[]";
        assertEquals(graph.printGraph(),result);

    }
// A collection of all nodes can be properly retrieved from the graph
@Test void Test() {

    Graph graph=new Graph();

    graph.addVertex("A");
    graph.addVertex("B");
    graph.addVertex("C");


    //add edge for graph
    graph.addEdges("A","B");
    System.out.println(graph.get_nodes());
    System.out.println(graph.printGraph());
    String result="[Vertex{data='A'}, Vertex{data='B'}, Vertex{data='C'}]";
    assertEquals(graph.get_nodes().toString(),result);

}

// All appropriate neighbors can be retrieved from the graph
    @Test void Test2() {


        Graph graph=new Graph();

        graph.addVertex("A");
        graph.addVertex("B");
        graph.addVertex("C");

        graph.addEdges("A","B");
        graph.addEdges("B","C");
        graph.addEdges("A","C");

        System.out.println(graph.printGraph());

        Vertex vertex=new Vertex("A");


        String result="[Vertex{data='B'}, Vertex{data='C'}, Vertex{data='2'}]";
        assertEquals(graph.get_neighbors(vertex).toString(),result);

    }
    // The proper size is returned, representing the number of nodes in the graph
    @Test void Test3() {


        Graph graph=new Graph();

        graph.addVertex("A");
        graph.addVertex("B");
        graph.addVertex("C");

        graph.addEdges("A","B");
        graph.addEdges("B","C");
        graph.addEdges("A","C");

        System.out.println(graph.printGraph());



        int result=3;
        assertEquals(graph.size(),result);

    }
    @Test void Test4() {


        Graph graph=new Graph();

        graph.addVertex("A");
        graph.addVertex("B");
        graph.addVertex("C");

        graph.addEdges("A","B");
        graph.addEdges("B","C");
        graph.addEdges("A","C");

        System.out.println(graph.printGraph());

        String result="[A, B, C]";
        assertEquals(graph.bfs(graph,"A").toString(),result);

    }
    @Test void Test5() {


        Graph graph=new Graph();
App app=new App();

        String str1 = "geeksforgeeks";
        String str2 = "forgeeksgeeks";


        assertTrue(app.isAnagram(str1, str2));
    }
    @Test void Test6() {


        Graph graph=new Graph();
        App app=new App();


        String str2 = "A ship in port is safe, but that's not what ships are built for.";
        String result=".rof tliub era spihs tahw ton s'taht tub ,efas si trop ni pihs A";

assertEquals(app.reverseString(str2).toString(),result);

    }
    @Test void Test7_forCodeChallenge43() {


        int roman = 634;

            RomanNumeral N = new RomanNumeral(roman);
            System.out.println(N.toInt()+ " = " +N.toString() );




        String result="DCXXXIV";
        assertEquals(N.toString(),result);

    }


    @Test void Test8_code_cahallenge_38() {


        Graph graph=new Graph();

        graph.addVertex("A");
        graph.addVertex("B");
        graph.addVertex("C");

        graph.addEdges("A","B");
        graph.addEdges("B","C");
        graph.addEdges("A","C");

        System.out.println(graph.printGraph());

        String result="[A, C, B]";
        assertEquals(graph.Depth_first(graph,"A").toString(),result);

    }

    @Test void Test8_code_cahallenge_37() {


        Graph graph=new Graph();

        graph.addVertex("A");
        graph.addVertex("B");
        graph.addVertex("C");

        graph.addEdge("A","B",10);
        graph.addEdge("B","C",30);
        graph.addEdge("A","C",40);

        String []city={"A","B"};

        System.out.println(graph.printGraph());

        int result=10;
        assertEquals(graph.businessTrip(graph,city),result);

    }
//    @Test void Test8_code_cahallenge_44() {
//
//
//        int[][] array =  {
//                {1, 1, 1 },
//                { 2, 2, 2 },
//                {3, 3, 3}
//
//        };
//App app=new App();
//        int[][] rotated = app.RotateMatrix(array, 3);
//
//
//
//        int[][] result =  {
//                {3, 2, 1},
//                { 3, 2, 1 },
//                {3, 2, 1}
//
//        };
//
//
//
//
//        asserte(app.RotateMatrix(array, 3),result);
//
//    }

    }



